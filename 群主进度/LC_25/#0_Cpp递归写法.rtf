{\rtf1\ansi\ansicpg936\cocoartf2569
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Monaco;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs28 \cf0 //2020.09.12_#0_Cpp
\f1 \'b5\'dd\'b9\'e9\'d0\'b4\'b7\'a8
\f0 \
\
/**\
 * Definition for singly-linked list.\
 * struct ListNode \{\
 *     int val;\
 *     ListNode *next;\
 *     ListNode(int x) : val(x), next(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    ListNode* reverseKGroup(ListNode* head, int k) \{\
        ListNode * cur = head;\
        int count = 0;\
        \
        while (cur != NULL && count != k) \{\
            cur = cur->next;\
            count++;\
        \}\
        \
        if (count == k) \{\
            cur = reverseKGroup(cur, k);\
            \
            while (count-- > 0) \{\
                ListNode * temp = head->next;\
                head->next = cur;\
                cur = head;\
                head = temp;\
            \}\
            \
            head = cur;\
        \}\
        return head;\
    \}\
\};\
\
\
//Java
\f1 \'b5\'dd\'b9\'e9\'d0\'b4\'b7\'a8
\f0 \
/*\
public ListNode reverseKGroup(ListNode head, int k) \{\
    ListNode curr = head;\
    int count = 0;\
    while (curr != null && count != k) \{ // find the k+1 node\
        curr = curr.next;\
        count++;\
    \}\
    if (count == k) \{ // if k+1 node is found\
        curr = reverseKGroup(curr, k); // reverse list with k+1 node as head\
        // head - head-pointer to direct part, \
        // curr - head-pointer to reversed part;\
        while (count-- > 0) \{ // reverse current k-group: \
            ListNode tmp = head.next; // tmp - next head in direct part\
            head.next = curr; // preappending "direct" head to the reversed list \
            curr = head; // move head of reversed part to a new node\
            head = tmp; // move "direct" head to the next node in direct part\
        \}\
        head = curr;\
    \}\
    return head;\
\}\
*/}
{\rtf1\ansi\ansicpg936\cocoartf2569
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Monaco;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs28 \cf0 //2020.09.11_#0_BestVotes\
\
\
/**\
 * Definition for singly-linked list.\
 * struct ListNode \{\
 *     int val;\
 *     ListNode *next;\
 *     ListNode(int x) : val(x), next(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    ListNode* reverseKGroup(ListNode* head, int k) \{\
        ListNode * cur = head;\
        int count = 0;\
        \
        while (cur != NULL && count != k) \{\
            cur = cur->next;\
            //
\f1 \'d0\'b4\'b5\'bd\'d5\'e2\'c0\'ef\'be\'cd\'d3\'d0\'cb\'bc\'c2\'b7\'c1\'cb
\f0 \
            //
\f1 \'cf\'e0\'b5\'b1\'d3\'da\'b5\'da\'d2\'bb\'b5\'c0\'b7\'b4\'d7\'aa\'d5\'fb\'b8\'f6\'c1\'b4\'b1\'ed\'ba\'cd
\f0 \
        \}\
        \
    \}\
\};\
\
\
//Java
\f1 \'b5\'dd\'b9\'e9\'d0\'b4\'b7\'a8
\f0 \
/*\
public ListNode reverseKGroup(ListNode head, int k) \{\
    ListNode curr = head;\
    int count = 0;\
    while (curr != null && count != k) \{ // find the k+1 node\
        curr = curr.next;\
        count++;\
    \}\
    if (count == k) \{ // if k+1 node is found\
        curr = reverseKGroup(curr, k); // reverse list with k+1 node as head\
        // head - head-pointer to direct part, \
        // curr - head-pointer to reversed part;\
        while (count-- > 0) \{ // reverse current k-group: \
            ListNode tmp = head.next; // tmp - next head in direct part\
            head.next = curr; // preappending "direct" head to the reversed list \
            curr = head; // move head of reversed part to a new node\
            head = tmp; // move "direct" head to the next node in direct part\
        \}\
        head = curr;\
    \}\
    return head;\
\}\
*/\
\
\
//Java
\f1 \'b7\'c7\'b5\'dd\'b9\'e9\'d0\'b4\'b7\'a8
\f0 \
\
/**\
     * Reverse a link list between begin and end exclusively\
     * an example:\
     * a linked list:\
     * 0->1->2->3->4->5->6\
     * |           |   \
     * begin       end\
     * after call begin = reverse(begin, end)\
     * \
     * 0->3->2->1->4->5->6\
     *          |  |\
     *      begin end\
     * @return the reversed list's 'begin' node, which is the precedence of node end\
     */\
\
/*\
public ListNode reverseKGroup(ListNode head, int k) \{\
    ListNode begin;\
    if (head==null || head.next ==null || k==1)\
    	return head;\
    ListNode dummyhead = new ListNode(-1);\
    dummyhead.next = head;\
    begin = dummyhead;\
    int i=0;\
    while (head != null)\{\
    	i++;\
    	if (i%k == 0)\{\
    		begin = reverse(begin, head.next);\
    		head = begin.next;\
    	\} else \{\
    		head = head.next;\
    	\}\
    \}\
    return dummyhead.next;\
    \
\}\
\
public ListNode reverse(ListNode begin, ListNode end)\{\
	ListNode curr = begin.next;\
	ListNode next, first;\
	ListNode prev = begin;\
	first = curr;\
	while (curr!=end)\{\
		next = curr.next;\
		curr.next = prev;\
		prev = curr;\
		curr = next;\
	\}\
	begin.next = prev;\
	first.next = curr;\
	return first;\
\}\
*/\
\
\
//Cpp
\f1 \'d0\'b4\'b7\'a8
\f0 \
\
/*\
\
-1 -> 1 -> 2 -> 3 -> 4 -> 5\
 |    |    |    | \
pre  cur  nex  tmp\
\
-1 -> 2 -> 1 -> 3 -> 4 -> 5\
 |         |    |    | \
pre       cur  nex  tmp\
\
-1 -> 3 -> 2 -> 1 -> 4 -> 5\
 |              |    |    | \
pre            cur  nex  tmp\
\
*/\
\
/*\
\
Above is how it works inside one group iteration(for example, k=3)\
\
class Solution \{\
public:\
    ListNode *reverseKGroup(ListNode *head, int k) \{\
        if(head==NULL||k==1) return head;\
        int num=0;\
        ListNode *preheader = new ListNode(-1);\
        preheader->next = head;\
        ListNode *cur = preheader, *nex, *tmp, *pre = preheader;\
        while(cur = cur->next) \
            num++;\
        while(num>=k) \{\
            cur = pre->next;\
            nex = cur->next;\
            for(int i=1;i<k;i++) \{\
                tmp= nex->next;\
                nex->next = pre->next;\
                pre->next = nex;\
                cur->next = tmp;\
                nex = tmp;\
            \}\
            pre = cur;\
            num-=k;\
        \}\
        return preheader->next;\
    \}\
\};\
Thanks to ciaoliang1992, the tmp pointer is no necessary, so the more concise solution is\
\
class Solution \{\
public:\
    ListNode *reverseKGroup(ListNode *head, int k) \{\
        if(head==NULL||k==1) return head;\
        int num=0;\
        ListNode *preheader = new ListNode(-1);\
        preheader->next = head;\
        ListNode *cur = preheader, *nex, *pre = preheader;\
        while(cur = cur->next) \
            num++;\
        while(num>=k) \{\
            cur = pre->next;\
            nex = cur->next;\
            for(int i=1;i<k;++i) \{\
                cur->next=nex->next;\
                nex->next=pre->next;\
                pre->next=nex;\
                nex=cur->next;\
            \}\
            pre = cur;\
            num-=k;\
        \}\
        return preheader->next;\
    \}\
\};\
\
*/\
}
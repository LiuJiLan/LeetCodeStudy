{\rtf1\ansi\ansicpg936\cocoartf2569
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Monaco;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs28 \cf0 //2020.09.12_#1_
\f1 \'b5\'dd\'b9\'e9\'b2\'bb\'b4\'ef\'b1\'ea
\f0 \
\
/**\
 * Definition for singly-linked list.\
 * struct ListNode \{\
 *     int val;\
 *     ListNode *next;\
 *     ListNode(int x) : val(x), next(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    ListNode* reverseKGroup(ListNode* head, int k) \{\
        //In the following program\
        //node set as the previous one of the head\
        //head just like another temp\
        //node head temp -> pre cur next\
        \
        ListNode * node = head;\
        int count = 0;\
        \
        while (node != NULL && count != k) \{\
            node = node->next;\
            count++;\
        \}\
        \
        \
        \
        if (count == k) \{\
            //count == k
\f1 \'b2\'c5\'c4\'dc\'bd\'f8\'d0\'d0\'b5\'dd\'b9\'e9
\f0 \
            //now node is the k+1 one\
            node = reverseKGroup(node, k);\
            \
        //while (count-- > 0) 
\f1 \'bf\'c9\'d2\'d4\'bc\'c6\'ca\'fd
\f0 conut
\f1 \'b4\'ce\'b2\'a2\'b0\'d1
\f0 count
\f1 \'b9\'e9\'c1\'e3
\f0 \
        while (count-- > 0) \{\
            ListNode * temp = head->next;\
            head->next = node;\
            node = head;//node
\f1 \'b1\'e4\'b3\'c9\'cf\'d6\'d4\'da\'b5\'c4
\f0 head\
            head = temp;\
        \}\
            return node;\
            \
        \}\
        \
        \
        \
        return head;\
    \}\
\};}